package salesTransaction.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.BaseRulesConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.constraints.rules.Rule;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.constraints.rules.BaseRule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.core.aspects.constraints.rules.RuleId;
import jetbrains.mps.core.aspects.constraints.rules.kinds.PredefinedRuleKinds;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Item_ConstraintRules extends BaseRulesConstraintsDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x1235c5e631fd4d86L, 0xa6f2f516980c6b8fL, 0x73a9c81d9814e60L, "salesTransaction.structure.Item");

  public static final Rule<ContainmentContext> check_id4543354275645795792 = new Rule_availabilityChecker();

  private static final List<Rule<?>> RULES = Collections.unmodifiableList(Arrays.<Rule<?>>asList(check_id4543354275645795792));

  @NotNull
  @Override
  public List<Rule<?>> getDeclaredRules() {
    return RULES;
  }

  public static final class Rule_availabilityChecker extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:5f483643-6c22-49d5-8e83-d64bee9f48bb(salesTransaction.constraints)/4543354275645795792");
    public static final RuleId ID_availabilityChecker = new RuleId(4543354275645795792L, SOURCE_NODE_REF);

    public Rule_availabilityChecker() {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_CHILD, ID_availabilityChecker, SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return SPropertyOperations.getInteger(context.getChildNode(), PROPS.availableNumber$6gln) != 0;
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
  }

  /*package*/ Item_ConstraintRules() {
    super(CONCEPT);
  }

  private static final class PROPS {
    /*package*/ static final SProperty availableNumber$6gln = MetaAdapterFactory.getProperty(0x1235c5e631fd4d86L, 0xa6f2f516980c6b8fL, 0x73a9c81d9814e60L, 0x73a9c81d9814e6cL, "availableNumber");
  }
}
